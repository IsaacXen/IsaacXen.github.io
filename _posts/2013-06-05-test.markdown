---
layout: post
title:  "Welcome to test"
date:   2013-06-05 17:06:25
categories: jekyll update
---

测试一下 Solar 主题对 Markdown 的支持程度。

### Table of Contents

[toc]


###  Headers

# This is an H1

## This is an H2

### This is an H3

#### This is an H4

##### This is an H5

###### This is an H6

### Blockquotes

> This is a blockquotes
>
> > Nested blockquotes

### Lists

#### Ordered list

1. Red
2. Green
3. Blue
   1. Nested Blue

#### Un-ordered list

* Red
* Green
* Blue
  * Nested Blue
    * Nested Blue

#### Nested list

1. Ordered
   * Un-Ordered

### Task List

- [ ] a task list item
- [ ] **another** task list *item*
- [x] completed item

### (Fenced) Code Blocks

This is a `Code Block`

CSS:

```css
/* Comment */

.clear { clear: both; }
#page {
	width: 500px;
	margin: 0 auto;
	position: relative;
}
#sidebar a {
	border: none;
	font-family: "Helvetica Neue", "Helvetica", serif;
	font-size: 1.2em;
	padding: 2px 4px;
}
@font-face {
  font-family: 'solarthemeicons';
  src: url('../fonts/solarthemeicons.eot');
  src: url('../fonts/solarthemeicons.eot#iefix') format('embedded-opentype'),
       url('../fonts/solarthemeicons.woff') format('woff'),
       url('../fonts/solarthemeicons.ttf') format('truetype'),
       url('../fonts/solarthemeicons.svg#solarthemeicons') format('svg');
  font-weight: normal;
  font-style: normal;
}
```

JSON:

{% highlight json %}
{
  // Line comments are not included in standard but nonetheless allowed.
  /* As well as block comments. */
  "the only keywords are": [true, false, null],
  "strings with": {
    "no excapes": "pseudopolinomiality"
    "valid escapes": "C-style\r\n and unicode\u0021",
    "illegal escapes": "\0377\x\"
  },
  "some numbers": [
    42,
    -0.0e-0,
    6.626e-34
  ] 
}
{% endhighlight %}


Cpp:

{% highlight cpp %}
/*
 * Block comment 
 */
#include <vector>

using namespace std;  // line comment
namespace foo {

  typedef struct Struct {
    int field;
  } Typedef;
  enum Enum {Foo = 1, Bar = 2};

  Typedef *globalVar;
  extern Typedef *externVar;

  template<typename T, int N>
  class Class {
    T n;
  public:
    void function(int paramName) {
      int *localVar = new int[1];
      this->n = N; 

    label:
      printf("Formatted string %d\n\g", localVar[0]);
      printf(R"**(Formatted raw-string %d\n)**", 1);
      std::cout << (1 << 2) << std::endl;  

    #define FOO(A) A
    #ifdef DEBUG
      printf("debug");
    #endif
    }
  };
}
{% endhighlight %}

HTML:

{% highlight html %}
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!--
*        Sample comment
-->
<HTML>
<head>
<title>Android Studio</title>
</head>
<body>
<h1>Android Studio</h1>
<p><br><b><IMG border=0 height=12 src="images/hg.gif" width=18 >
What is Android&nbsp;Studio? &#x00B7; &Alpha; </b><br><br>
</body>
</html>
{% endhighlight %}

XML:

{% highlight xml %}
<?xml version='1.0' encoding='ISO-8859-1'  ?>
<!DOCTYPE index>
<!-- Some xml example -->
<index version="1.0" xmlns:pf="http://test">
   <name>Main Index</name>
   <indexitem text="rename" target="refactoring.rename"/>
   <indexitem text="move" target="refactoring.move"/>
   <indexitem text="migrate" target="refactoring.migrate"/>
   <indexitem text="usage search" target="find.findUsages"/>
   <someTextWithEntityRefs>&amp; &#x00B7;</someTextWithEntityRefs>
   <withCData><![CDATA[
          <object class="MyClass" key="constant">
          </object>
        ]]>
   </withCData>
   <indexitem text="project" target="project.management"/>
   <pf:foo pf:bar="bar"/>
</index>
{% endhighlight %}

Java:

{% highlight java %}
/* Block comment */
import java.util.Date;
/**
 * Doc comment here for <code>SomeClass</code>
 * @param T type parameter
 * @see Math#sin(double)
 */
@Annotation (name=value)
public class SomeClass<T extends Runnable> { // some comment
  private T field = null;
  private double unusedField = 12345.67890;
  private UnknownType anotherString = "Another\nStrin\g";
  public static int staticField = 0;

  public SomeClass(AnInterface param, int[] reassignedParam) {
    int localVar = "IntelliJ"; // Error, incompatible types
    System.out.println(anotherString + toString() + localVar);
    long time = Date.parse("1.2.3"); // Method is deprecated
    int reassignedValue = this.staticField; 
    reassignedValue ++; 
    field.run(); 
    new SomeClass() {
      {
        int a = localVar;
      }
    };
    reassignedParam = new ArrayList<String>().toArray(new int[0]);
  }
}
enum AnEnum { CONST1, CONST2 }
interface AnInterface {
  int CONSTANT = 2;
  void method();
}
abstract class SomeAbstractClass {
}
{% endhighlight %}


{% highlight java linenos %}
This is a Code block
public static void main() {
  String testingHighLight;
} 
{% endhighlight %}

Some Text Here.

### Math Blocks

Here is an example of *LaTeX*:

$$\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix} \mathbf{i} & \mathbf{j} & \mathbf{k} \\\frac{\partial X}{\partial u} &  \frac{\partial Y}{\partial u} & 0 \\\frac{\partial X}{\partial v} &  \frac{\partial Y}{\partial v} & 0 \\\end{vmatrix}$$

### Tables

| First Header | Second Header |
| ------------ | ------------- |
| Content Cell | Content Cell  |
| Content Cell | Content Cell  |

| Left-Aligned  | Center Aligned  | Right Aligned |
| :------------ | :-------------: | ------------: |
| col 3 is      | some wordy text |         $1600 |
| col 2 is      |    centered     |           $12 |
| zebra stripes |    are neat     |            $1 |

### Footnotes

This is a [^footnote].

[^footnote]: Here is the *text* of the **footnote**.

### Horizontal Rules

---

### Links

This is [an example](http://example.com/ "Title") inline link.

[This link](http://example.net/) has no title attribute.

This is [an example][id] reference-style link.

Then, anywhere in the document, you define your link label like this, on a line by itself:

[id]: http://example.com/	"Optional Title Here"



[Google][]

And then define the link:

[Google]: http://google.com/

### URLs

`<i@typora.io>` becomes <i@typora.io>.

### Images

![Alt text](/images/shakespeare.jpg)

![Alt text](/images/shakespeare.jpg "Optional title")

### Emphasis

*single asterisks*

_single underscores_

\*this text is surrounded by literal asterisks\*

### Strong

**double asterisks**

__double underscores__

### Code

```markdown
Use the `printf()` function.
```

### Strikethrough

~~Mistaken text.~~

### Underline

Underline is powered by raw HTML.

`<u>Underline</u>` becomes <u>Underline</u>.

### Emoji :happy:

Input emoji with syntax `:smile:`. 

User can trigger auto-complete suggestions for emoji by pressing `ESC` key, or trigger it automatically after enable it on preference panel. Also, input UTF8 emoji char directly from `Edit` -> `Emoji & Symbols` from menu bar is also supported. 

### Inline Math

To use this feature, first, please enable it in `Preference` Panel -> `Markdown` Tab. Then use `$` to wrap TeX command, for example: `$\lim_{x \to \infty} \exp(-x) = 0$` will be rendered as LaTeX command. 

To trigger inline preview for inline math: input “$”, then press `ESC` key, then input TeX command, a preview tooltip will be visible like below:

$\lim_{x \to \infty} \exp(-x) = 0$