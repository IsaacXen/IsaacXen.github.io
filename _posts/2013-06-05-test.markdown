---
layout: post
title:  "语法高亮测试"
date:   2013-06-05 17:06:25
categories: jekyll update
---

测试语法高亮。

### (Fenced) Code Blocks

This is a `Code Block`

CSS:

{% highlight css %}
/* Comment */

.clear { clear: both; }
#page {
	width: 500px;
	margin: 0 auto;
	position: relative;
}
#sidebar a {
	border: none;
	font-family: "Helvetica Neue", "Helvetica", serif;
	font-size: 1.2em;
	padding: 2px 4px;
}
@font-face {
  font-family: 'solarthemeicons';
  src: url('../fonts/solarthemeicons.eot');
  src: url('../fonts/solarthemeicons.eot#iefix') format('embedded-opentype'),
       url('../fonts/solarthemeicons.woff') format('woff'),
       url('../fonts/solarthemeicons.ttf') format('truetype'),
       url('../fonts/solarthemeicons.svg#solarthemeicons') format('svg');
  font-weight: normal;
  font-style: normal;
}
{% endhighlight %}

JSON:

{% highlight json %}
{
  // Line comments are not included in standard but nonetheless allowed.
  /* As well as block comments. */
  "the only keywords are": [true, false, null],
  "strings with": {
    "no excapes": "pseudopolinomiality"
    "valid escapes": "C-style\r\n and unicode\u0021",
    "illegal escapes": "\0377\x\"
  },
  "some numbers": [
    42,
    -0.0e-0,
    6.626e-34
  ] 
}
{% endhighlight %}


Cpp:

{% highlight cpp %}
/*
 * Block comment 
 */
#include <vector>

using namespace std;  // line comment
namespace foo {

  typedef struct Struct {
    int field;
  } Typedef;
  enum Enum {Foo = 1, Bar = 2};

  Typedef *globalVar;
  extern Typedef *externVar;

  template<typename T, int N>
  class Class {
    T n;
  public:
    void function(int paramName) {
      int *localVar = new int[1];
      this->n = N; 

    label:
      printf("Formatted string %d\n\g", localVar[0]);
      printf(R"**(Formatted raw-string %d\n)**", 1);
      std::cout << (1 << 2) << std::endl;  

    #define FOO(A) A
    #ifdef DEBUG
      printf("debug");
    #endif
    }
  };
}
{% endhighlight %}

HTML:

{% highlight html %}
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!--
*        Sample comment
-->
<HTML>
<head>
<title>Android Studio</title>
</head>
<body>
<h1>Android Studio</h1>
<p><br><b><IMG border=0 height=12 src="images/hg.gif" width=18 >
What is Android&nbsp;Studio? &#x00B7; &Alpha; </b><br><br>
</body>
</html>
{% endhighlight %}

XML:

{% highlight xml %}
<?xml version='1.0' encoding='ISO-8859-1'  ?>
<!DOCTYPE index>
<!-- Some xml example -->
<index version="1.0" xmlns:pf="http://test">
   <name>Main Index</name>
   <indexitem text="rename" target="refactoring.rename"/>
   <indexitem text="move" target="refactoring.move"/>
   <indexitem text="migrate" target="refactoring.migrate"/>
   <indexitem text="usage search" target="find.findUsages"/>
   <someTextWithEntityRefs>&amp; &#x00B7;</someTextWithEntityRefs>
   <withCData><![CDATA[
          <object class="MyClass" key="constant">
          </object>
        ]]>
   </withCData>
   <indexitem text="project" target="project.management"/>
   <pf:foo pf:bar="bar"/>
</index>
{% endhighlight %}

Java:

{% highlight java %}
/* Block comment */
import java.util.Date;
/**
 * Doc comment here for <code>SomeClass</code>
 * @param T type parameter
 * @see Math#sin(double)
 */
@Annotation (name=value)
public class SomeClass<T extends Runnable> { // some comment
  private T field = null;
  private double unusedField = 12345.67890;
  private UnknownType anotherString = "Another\nStrin\g";
  public static int staticField = 0;

  public SomeClass(AnInterface param, int[] reassignedParam) {
    int localVar = "IntelliJ"; // Error, incompatible types
    System.out.println(anotherString + toString() + localVar);
    long time = Date.parse("1.2.3"); // Method is deprecated
    int reassignedValue = this.staticField; 
    reassignedValue ++; 
    field.run(); 
    new SomeClass() {
      {
        int a = localVar;
      }
    };
    reassignedParam = new ArrayList<String>().toArray(new int[0]);
  }
}
enum AnEnum { CONST1, CONST2 }
interface AnInterface {
  int CONSTANT = 2;
  void method();
}
abstract class SomeAbstractClass {
}
{% endhighlight %}


{% highlight java linenos %}
This is a Code block
public static void main() {
  String testingHighLight;
} 
{% endhighlight %}

Some Text Here.

